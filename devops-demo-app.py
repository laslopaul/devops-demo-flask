from flask import Flask, render_template
from cli import db_cli
from os import getenv
import backend
import logging

app = Flask(__name__)
db_conn_status = False


if __name__ != '__main__':
    # if we are not running directly, we set the loggers for Gunicorn
    gunicorn_logger = logging.getLogger('gunicorn.error')
    app.logger.handlers = gunicorn_logger.handlers
    app.logger.setLevel(gunicorn_logger.level)


# Add CLI commands
app.cli.add_command(db_cli)


# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    try:
        backend.db.connect()
    except backend.pw.OperationalError as e:
        error_msg = f"MySQL error code {e.args[0]}: {e.args[1]}"
        app.logger.error(error_msg)
    else:
        global db_conn_status
        db_conn_status = True


# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not backend.db.is_closed():
        backend.db.close()


@app.route('/')
def index():
    try:
        fortune = backend.read_fortune()
    except (backend.pw.ProgrammingError, backend.pw.OperationalError) as e:
        error_msg = f"MySQL error code {e.args[0]}: {e.args[1]}"
        app.logger.error(error_msg)
        fortune = error_msg

    return render_template(
        'index.html', fortune=fortune, connected=db_conn_status,
        app_version=getenv("APP_VERSION"), app_env=getenv("APP_ENV")
    )
